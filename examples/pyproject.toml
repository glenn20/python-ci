[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "MY_PROJECT_NAME"
description = "MY PROJECT DESCRIPTION."
readme = "README.md"
authors = [{name = "MY_NAME", email = "MY_EMAIL"}]
urls = {Homepage = "https://github.com/MY_NAME/MY_PROJECT_NAME"}
license = {text = "MIT"}
requires-python = ">=3.8"
dependencies = [
    "rich>=10.12.0",  # For pretty printing: rich.print()
]
dynamic = ["version"]

[project.scripts]
hello = "MY_PROJECT_NAME:main"

[tool.hatch]
build.targets.wheel.packages = ["src/MY_PROJECT_NAME"]
build.hooks.vcs.version-file = "src/MY_PROJECT_NAME/_version.py"
version.source = "vcs"  # Get the version from git, eg: 0.0.6.dev0+g1234567
# Drop the local version part (eg: +g1234567) or pypi will reject package
version.raw-options.local_scheme = "no-local-version"
# A manually triggered github release workflow may generate a new tag
# with .devN suffix. We need to tell setuptools_scm to ignore past tags with
# this suffix when calculating the version number else it refuses to
# bump the version number.
version.raw-options.git_describe_command = [
    "git", "describe", "--dirty", "--tags", "--long",
    "--match", "v*.[0-9]",
    "--match", "v*.[0-9][0-9]",
    "--match", "v*.[0-9][0-9][0-9]",
]

[tool.uv]
dev-dependencies = [
    "pytest>=8.3.2",  # For running tests: pytest, tox
    "pytest-cov>=3.0.0",
    "tox>=4.21",
    "tox-uv>=0.3.0",  # uv support for tox
    "mypy>=0.910",  # For code type checks: uv run mypy src
    "ruff>=0.6.7",  # For linting: uv run ruff format --check src
    "keyring>=25",  # For uv publish --keyring-provider=subprocess
    "hatch>=1.12",  # For building package
    "hatch-vcs>=0.3.0",  # For building and updating _version.py
]

[tool.tox]  # https://tox.wiki/en/latest/config.html#pyproject-toml-native
env_list = [
    "clean", "mypy", "lint", "format",
    "3.8", "3.9", "3.10", "3.11", "3.12", "3.13"
]
requires = ["tox>=4.19", "tox-uv>=1.13"]
env.clean.commands = [["coverage", "erase"]]  # Reset the coverage data at start
env.clean.deps = ["coverage>=7.0"]
env.clean.skip_install = true
env.mypy.commands = [["mypy"]]
env.mypy.deps = ["mypy>=0.910", "pytest"]
env.lint.commands = [["ruff", "check"]]
env.lint.deps = ["ruff>=0.6.0"]
env.format.commands = [["ruff", "format", "--check"]]
env.format.deps = ["ruff>=0.6.0"]
env_run_base.commands = [["pytest"]]
env_run_base.deps = ["pytest>=8.3.2", "pytest-cov>=3.0.0"]
env_run_base.package = "editable"

[tool.mypy]
files = ["src", "tests"]
python_version = "3.9"
disallow_untyped_defs = true
warn_return_any = true
warn_unused_ignores = true
mypy_path = "typings"

[tool.ruff]
include = ["src/**/*.py", "tests/**/*.py"]
exclude = ["_version.py"]
lint.extend-select = ["I"]  # Enable ruffs isort rules (for compat with vscode ruff)

[tool.pytest.ini_options]
minversion = "6.0"
addopts = ["--cov"]

[tool.coverage]
run.source = ["src"]
run.omit = ["_version.py"]
report.skip_covered = true
append = true
